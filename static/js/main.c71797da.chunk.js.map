{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","typography","fontFamily","join","useStyles","makeStyles","root","flexGrow","maxWidth","demo","backgroundColor","title","margin","spacing","App","classes","useState","todoText","setTodoText","todoList","setTodoList","checked","setChecked","useEffect","getTodo","undefined","localStorage","todo","JSON","parse","sort","a","b","active","onChecked","i","e","target","arrayString","stringify","setItem","Actions","Grid","container","item","xs","md","style","marginTop","Button","variant","color","onClick","className","button","filter","startIcon","float","removeItem","Lists","List","maxHeight","overflow","dense","map","index","labelId","key","ListItem","ListItemIcon","Checkbox","edge","tabIndex","disableRipple","onChange","bind","inputProps","ListItemText","textDecoration","primary","ListItemSecondaryAction","IconButton","aria-label","splice","Divider","ThemeProvider","console","log","Container","onSubmit","preventDefault","newTodo","push","noValidate","autoComplete","FormControl","fullWidth","TextField","id","label","value","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c71797da.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\n// MATERIAL UI\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Button from \"@material-ui/core/Button\";\nimport FolderIcon from \"@material-ui/icons/Folder\";\nimport DeleteIcon from \"@material-ui/icons/DeleteSharp\";\nimport Typography from \"@material-ui/core/Typography\";\nimport List from \"@material-ui/core/List\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { MuiThemeProvider } from \"@material-ui/styles\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport DoneAllIcon from \"@material-ui/icons/DoneAll\";\nimport ClearAllIcon from \"@material-ui/icons/ClearAll\";\nimport ErrorOutlineIcon from \"@material-ui/icons/ErrorOutline\";\n\n// APP STYLE\nimport \"./App.css\";\n\n// THEME\n\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: [\"monospace\"].join(\",\"),\n  },\n});\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    maxWidth: 752,\n  },\n  demo: {\n    backgroundColor: \"#e8e8e8\",\n  },\n  title: {\n    margin: theme.spacing(4, 0, 2),\n  },\n}));\n\nfunction generate(element) {\n  return [0, 1, 2].map((value) =>\n    React.cloneElement(element, {\n      key: value,\n    })\n  );\n}\n\nconst App = () => {\n  const classes = useStyles();\n  // DEFINING STATES\n  const [todoText, setTodoText] = useState(\"\");\n  const [todoList, setTodoList] = useState([]);\n  const [checked, setChecked] = useState(false);\n\n  useEffect(() => {\n    getTodo();\n  }, []);\n\n  const getTodo = () => {\n    if (localStorage.todo !== undefined) {\n      setTodoList(\n        JSON.parse(localStorage.todo).sort((a, b) =>\n          a.active < b.active ? 1 : -1\n        )\n      );\n    }\n    return localStorage.todo !== undefined ? JSON.parse(localStorage.todo) : [];\n  };\n\n  const onChecked = (i) => (e) => {\n    todoList[i].active = !e.target.checked;\n    setTodoList(todoList);\n    let arrayString = JSON.stringify(todoList);\n    localStorage.setItem(\"todo\", arrayString);\n    getTodo();\n    setChecked(!checked);\n  };\n\n  const removeTask = (index) => (e) => {\n    todoList.splice(index, 1);\n    let arrayString = JSON.stringify(todoList);\n    localStorage.setItem(\"todo\", arrayString);\n    setChecked(!checked);\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const newTodo = {\n      todo: todoText,\n      active: true,\n    };\n    todoList.push(newTodo);\n    let arrayString = JSON.stringify(todoList);\n    localStorage.setItem(\"todo\", arrayString);\n    setTodoText(\"\");\n    setChecked(!checked);\n  };\n\n  const Actions = (\n    <Grid container spacing={2}>\n      <Grid item xs={6} md={6} style={{ marginTop: \"10px\" }}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            setTodoList(\n              getTodo().sort((a, b) => (a.active < b.active ? 1 : -1))\n            );\n            setChecked(!checked);\n          }}\n          className={classes.button}\n        >\n          Show All\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            setTodoList(getTodo().filter((item) => item.active == false));\n            setChecked(!checked);\n          }}\n          className={classes.button}\n          startIcon={<DoneAllIcon />}\n        >\n          Completed Tasks\n        </Button>\n\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            setTodoList(getTodo().filter((item) => item.active == true));\n            setChecked(!checked);\n          }}\n          className={classes.button}\n          startIcon={<ErrorOutlineIcon />}\n        >\n          Pending\n        </Button>\n      </Grid>\n      <Grid item xs={6} md={6} style={{ marginTop: \"10px\" }}>\n        {\" \"}\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          style={{ float: \"right\" }}\n          onClick={() => {\n            localStorage.removeItem(\"todo\");\n            setTodoList(getTodo().filter((item) => item.active == false));\n            setChecked(!checked);\n          }}\n          className={classes.button}\n          startIcon={<ClearAllIcon />}\n        >\n          Clear All\n        </Button>\n      </Grid>\n    </Grid>\n  );\n  const Lists = (\n    <List style={{ maxHeight: \"300px\", overflow: \"auto\" }} dense={false}>\n      {todoList.map((item, i) => {\n        const labelId = `checkbox-list-label-${item.active}`;\n        return (\n          <div key={i}>\n            <ListItem>\n              <ListItemIcon>\n                <Checkbox\n                  edge=\"start\"\n                  checked={!item.active}\n                  tabIndex={-1}\n                  disableRipple\n                  onChange={onChecked(i).bind(this)}\n                  inputProps={{ \"aria-labelledby\": labelId }}\n                />\n              </ListItemIcon>\n              <ListItemText\n                style={!item.active ? { textDecoration: \"line-through\" } : {}}\n                primary={item.todo}\n              />\n              <ListItemSecondaryAction>\n                <IconButton\n                  edge=\"end\"\n                  aria-label=\"delete\"\n                  onClick={removeTask(i).bind(this)}\n                >\n                  <DeleteIcon />\n                </IconButton>\n              </ListItemSecondaryAction>\n            </ListItem>\n            <Divider />\n          </div>\n        );\n      })}\n    </List>\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\">\n        {console.log(\"render\")}\n        <Container maxWidth=\"md\">\n          <div className=\"wrapper\">\n            <form\n              onSubmit={onSubmit.bind(this)}\n              style={{ backgroundColor: \"white\" }}\n              noValidate\n              autoComplete=\"off\"\n            >\n              <FormControl fullWidth>\n                <TextField\n                  id=\"filled-basic\"\n                  label=\"What to do ?\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  value={todoText}\n                  onChange={(e) => {\n                    setTodoText(e.target.value);\n                  }}\n                />\n              </FormControl>\n            </form>\n            <div>\n              <Grid\n                item\n                xs={12}\n                md={12}\n                className={classes.demo}\n                style={{ marginTop: \"40px\" }}\n              >\n                <div className={classes.demo}>\n                  {todoList.length > 0 ? Lists : \"\"}\n                </div>\n              </Grid>\n            </div>\n          </div>\n          {todoList.length > 0 ? Actions : \"\"}\n        </Container>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}